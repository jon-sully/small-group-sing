---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection, getEntries } from "astro:content";
import Button from "../../components/Button.astro";
import SetlistJumper from "../../components/SetlistJumper.svelte";
import Layout from "../../layouts/Layout.astro";

interface Props {
  entry: CollectionEntry<"setlists">;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const entries = await getCollection("setlists");
  return entries.map((entry) => ({
    params: {
      slug: entry.id,
    },
    props: { entry },
  }));
};

const { entry } = Astro.props;

const songs = await getEntries(entry.data.songs);
const songRenders = await Promise.all(
  songs.map(async (song) => ({ slug: song.slug, ...(await song.render()) })),
);
---

<Layout title={entry.data.name}>
  <main class="mt-4">
    <Button as="a" variant="purple" href="/setlists" class="px-3 py-1.5">
      ‚Üê All Setlists
    </Button>
    <header>
      <h1 class="mb-4 text-4xl font-bold">{entry.data.name}</h1>
      <div class="mb-4 flex flex-col rounded-lg p-4 dark:bg-gray-800">
        <h2 class="text-3xl font-bold">Set List</h2>
        <p class="text-sm text-gray-400">Tap a song to jump to its lyrics.</p>
        <hr class="my-2 border-gray-700" />
        <ul class="flex flex-col gap-y-1">
          {
            songs.map((song) => (
              <li class="flex flex-col">
                <Button
                  data-jump-button
                  data-jump-to={song.slug}
                  variant="light"
                  class="grid grid-cols-[1fr_auto] items-center rounded border border-gray-700 p-1 px-2 text-left"
                >
                  <div>
                    <p class="line-clamp-1">{song.data.title}</p>
                    <p class="font-xs line-clamp-1 font-light italic dark:text-gray-400">
                      {song.data.artist}
                    </p>
                  </div>
                  <svg
                    class="h-5 w-5 text-gray-800 dark:text-white"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 19V5m0 14-4-4m4 4 4-4"
                    />
                  </svg>
                </Button>
              </li>
            ))
          }
        </ul>
      </div>
    </header>
    <section class="grow space-y-4">
      {
        songRenders.map(({ slug, Content, remarkPluginFrontmatter }) => (
          <article
            id={slug}
            class="rounded-lg p-4 dark:border-gray-700 dark:bg-gray-800"
          >
            <heading>
              <h2 class="text-3xl font-bold">
                {remarkPluginFrontmatter.title}
              </h2>
              <p class="text-sm italic dark:text-gray-400">
                {remarkPluginFrontmatter.artist}
              </p>
              <hr class="my-2 border-gray-700" />
            </heading>
            <div class="prose dark:prose-invert">
              <Content />
            </div>
          </article>
        ))
      }
    </section>
  </main>
  <br />
</Layout>
<div class="fixed bottom-0 flex w-full justify-end p-2">
  <SetlistJumper songs={songs} client:load />
</div>

<script>
  function onClickListener(e: MouseEvent) {
    const el = e.currentTarget as HTMLElement;
    if (!(el instanceof HTMLElement)) return;

    const jumpToValue = el.dataset.jumpTo;
    if (!jumpToValue)
      throw new Error("No data-jump-to attribute on jump button");

    const targetElement = document.getElementById(jumpToValue);
    if (!targetElement) throw new Error(`No element with ID ${jumpToValue}`);

    targetElement.scrollIntoView({ behavior: "smooth" });
  }

  document.querySelectorAll("[data-jump-button]").forEach((button) => {
    if (!(button instanceof HTMLButtonElement)) return;

    const jumpToValue = button.dataset.jumpTo;

    if (!jumpToValue)
      throw new Error("No data-jump-to attribute on jump button");

    button.addEventListener("click", onClickListener);
  });
</script>
